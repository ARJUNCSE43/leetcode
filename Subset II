class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
    
        
      sort(nums.begin(), nums.end()); // sort the array to handle duplicates
    int n = nums.size();
    int subsetCount = 1 << n; // number of possible subsets
    vector<vector<int>> result;
    for (int i = 0; i < subsetCount; i++) {
        vector<int> subset;
        bool skip = false;
        for (int j = 0; j < n; j++) {
            if (i & (1 << j)) { // check if jth bit is set
                if (j > 0 && (i >> (j - 1)) % 2 == 0 && nums[j] == nums[j - 1]) { // skip duplicates
                    skip = true;
                    break;
                }
                subset.push_back(nums[j]);
            }
        }
        if (!skip) {
            result.push_back(subset);
        }
    }
    return result;
    
    }
};
